<template>
	<view>
		<view class="form-item-list row">
			物品名称<text class="red">（必填）</text>
			<input type="text" placeholder="输入物品名称" v-model="goodName" @input="goodNameInput" />
		</view>
		<view class="form-item-list row column-r">
			物品类型
			<picker class="picker-box" :range="stdmodeArray" @change="stdmodeChange">
				{{goodType}}
				<text class="iconfont icon--right-jian"></text>
			</picker>
		</view>
		<view class="form-item-list row column-r">
			包装材质
			<picker class="picker-box" :range="materialArray" @change="materialChange">
				{{materialTxt==""?"纸、纤、木箱等":materialTxt}}
				<text class="iconfont icon--right-jian"></text>
			</picker>
		</view>
		<view class="form-item-list">
			寄件备注
			<textarea placeholder="寄件备注仅自己可见，当发货量大时，方便财务统计" v-model="goodMemo"></textarea>
		</view>
		<view class="form-item-list row column-r">
			寄件数量
			<view class="compute row">
				<text class="subtract" @click="computeNum(0)">-</text>
				<input class="num" type="number" v-model="txtnum" />
				<text class="add" @click="computeNum(1)">+</text>
			</view>
		</view>
		<view class="form-item-list predict row column-r">
			<view>
				预估重量<text class="red">（必填）</text>
				<text class="note">最终重量以快递员核算为准</text>
			</view>
			<view class="compute row">
				<text @click="computeWeight(0)">-</text>
				<input class="num" type="number" v-model="txtweight" />kg
				<text class="add" @click="computeWeight(1)">+</text>
			</view>
		</view>
		<view class="form-item-list row column-r-t" v-if="type == 'big'">
			体积填写
			<view>
				<view class="volume">
					<input type="number" placeholder="长" v-model="txtLong" />
					<text class="unit">cm</text>
					<text class="f-h">*</text>
					<input type="number" placeholder="宽" v-model="txtWidth" />
					<text class="unit">cm</text>
					<text class="f-h">*</text>
					<input type="number" placeholder="高" v-model="txtheight" />
					<text class="unit">cm</text>
				</view>
				<view class="volume total">
					总体积：
					<input type="digit" placeholder="0.000" v-model="volume" />
					<text class="unit">m³</text>
				</view>
			</view>
		</view>
		<view class="form-item-list">
			给快递员捎话
			<textarea placeholder="给小哥捎句话吧……" v-model="takeTxt"></textarea>
			<view class="take row column-r">
				<view>
					<text class="btn" :class="{ packActive: ispack === true }" @click="btnIsPack">带纸箱</text>
					<text class="btn" :class="{ packActive: isjd === true }" @click="btnIsjd">带胶带</text>
					<text class="btn" :class="{ packActive: islink === true }" @click="btnIslink">上门前联系</text>
				</view>
				<text>注意：纸箱需额外收费</text>
			</view>
		</view>
		<view class="tips red">注：因平台相关优惠折扣与物流产品相关，为确保您可享受平台便利，望合理填写产品重量及体积，预估与实际重量差距过大会产生无折扣订单，敬请留意！</view>
		<button class="btn-default-css" @click="btnSumit">确定</button>
		<view class="good-name-list" v-if="goodsNameList.length != 0">
			<text v-for="(item, i) in goodsNameList" :key="i" @click="btnGetGoodName(item.goodsName)">{{item.goodsName}}</text>
		</view>
	</view>
</template>
<script>
export default {
	data() {
		return {
			type: "",
			goodName: "",
			stdmodeArray: ["仪器整机","仪器设备","试剂耗材","化玻设备","实验家具","其他"],
			goodType: "",
			materialArray: ['纸', '纤', '木箱', '木架', '托膜', '托木'],
			materialTxt: "",
			goodsNameList: [],
			takeTxt: "",
			txtheight: "",
			txtWidth: "",
			txtLong: "",
			goodMemo: "",
			txtnum: 1,
			txtweight: "",
			volume: "",
			ispack: false,
			isjd: false,
			islink: false,
		}
	},
	onLoad(options){
		this.type = options.type;
		if(options.type == "small"){
			this.stdmodeArray = ["文件","仪器整机","仪器设备","试剂耗材","化玻设备","其他"];
		}
		let goodInfoData = this.$store.state.expressDeliveryInfo.goodInfo;
		if(JSON.stringify(goodInfoData) != "{}"){
			this.goodType = goodInfoData.packType;
			this.materialTxt = goodInfoData.packageservice;
			this.goodName = goodInfoData.goodName;
			this.txtweight = goodInfoData.weigth;
			this.txtWidth = goodInfoData.width;
			this.txtheight = goodInfoData.height;
			this.txtLong = goodInfoData.long;
			this.volume = goodInfoData.cubic;
			this.takeTxt = goodInfoData.remark;
			this.txtnum = goodInfoData.goodNum;
			this.goodMemo = goodInfoData.goodMemo;
		}else{
			this.goodType = this.stdmodeArray[0]; //物品类型
		}
	},
	computed: {
		txtCubic1: function() {
			try {
				let long = Number(this.txtLong);
				let height = Number(this.txtheight == "" ? 0 : this.txtheight);
				let width = Number(this.txtWidth == "" ? 0 : this.txtWidth);
				let cubicMeter = (long * height * width) / 1000000;
				return cubicMeter;
			} catch (e) {}
		}
	},
	watch: {
		txtCubic1(val){
			this.volume = val > 0 ? val : 0.01;
		},
		txtweight(val) {
			if (val !== "") {
				if (this.txtweight <= 0) {
					this.txtweight = 1;
				}
				if (this.type === "small") {
					if (this.txtweight >= 20) {
						this.txtweight = 20;
					}
				}
			}
		}
	},
	methods: {
		//确定
		btnSumit: function(){
			if(!this.Valid()) return false;
			let param = {
				packType: this.goodType, //物品类型
				packageservice: this.materialTxt, //包装材质
				goodName: this.goodName, //物品名称
				weigth: this.txtweight, //预估重量
				width: this.txtWidth, //体积填写宽
				height: this.txtheight, //体积填写高
				long: this.txtLong, //体积填写长
				cubic: this.volume, //总体积
				remark: this.takeTxt, //给快递员捎话
				goodNum: this.txtnum, //寄件数量
				goodMemo: this.goodMemo //寄件备注
			}
			this.$store.state.expressDeliveryInfo.goodInfo = param;
			this.$util.navigateBack(this);
		},
		//物品名称
		btnGetGoodName: function(val){
			this.goodName = val;
			this.goodsNameList = [];
		},
		//物品类型
		stdmodeChange: function(e){
			this.goodType = this.stdmodeArray[e.detail.value];
		},
		//包装材质
		materialChange: function(e){
			this.materialTxt = this.materialArray[e.detail.value];
		},
		//寄件数量
		computeNum(key){
			if(key == 0){
				if(this.txtnum <= 1) return false;
				this.txtnum --;
			}else{
				this.txtnum ++;
			}
		},
		//预估重量
		computeWeight(key){
			if(key == 0){
				if(this.txtweight <= 1) return false;
				this.txtweight --;
			}else{
				this.txtweight ++;
			}
		},
		btnIsPack() {
			if (this.ispack) {
				this.takeTxt = this.takeTxt.replace("请带纸箱 ", "");
			} else {
				this.takeTxt += "请带纸箱 ";
			}
			this.ispack = !this.ispack;
		},
		btnIsjd() {
			if (this.isjd) {
				this.takeTxt = this.takeTxt.replace("请带胶带 ", "");
			} else {
				this.takeTxt += "请带胶带 ";
			}
			this.isjd = !this.isjd;
		},
		btnIslink() {
			if (this.islink) {
				this.takeTxt = this.takeTxt.replace("上门前联系 ", "");
			} else {
				this.takeTxt += "上门前联系 ";
			}
			this.islink = !this.islink;
		},
		//关键字搜索物品名称
		goodNameInput: function(e){
			let val = e.detail.value;
			let that = this;
			if(val == ""){
				that.goodsNameList = [];
				return false;
			}
			that.$util.networkRequest({
				url : "/GoodsName/GetGoodsNameList",
				data: {goodsName: val},
				success : function(res){
					that.goodsNameList = res;
				}
			})
		},
		Valid(){
			if(!this.$util.isNotEmpty(this.goodName)){
				this.$util.showToast("物品名称不能为空");
				return false;
			}
			if(!this.$util.isNotEmpty(this.txtweight)){
				this.$util.showToast("预估重量不能为空");
				return false;
			}
			if(this.type == "big"){
				if(this.txtweight < 20){
					this.$util.showToast("大件重量不得小于20公斤，小件寄快递更实惠");
					return false;
				}
			}else{
				if(this.txtweight > 20){
					this.$util.showToast("小件重量不得大于20公斤，大件寄快递更实惠");
					return false;
				}
			}
			return true;
		}
	}
}
</script>
<style scoped>
.form-item-list{
	padding: 12px 15px;
	border-top: 1px solid #eee;
	line-height: 20px;
}
.row{
	display: flex;
	display: -webkit-flex;
	align-items: center;
}
.row.column-r-t{
	justify-content: space-between;
	align-items: flex-start;
}
.row.column-r{
	justify-content: space-between;
}
.form-item-list input{
	width: 60%;
	margin-left: 10px;
	line-height: 20px;
}
.form-item-list .picker-box{
	color: #999;
}
.form-item-list .icon--right-jian{
	font-size: 14px;
	color: #DBDBDB;
	margin-left: 5px;
}
.form-item-list textarea{
	border: 1px solid #eeeeee;
	width: calc(100% - 10px);
	width: -webkit-calc(100% - 10px);
	padding: 5px;
	font-size: 12px;
	height: 45px;
	border-radius: 3px;
	margin-top: 8px;
}
.form-item-list .compute{
	border-top: 1px solid #EEEEEE;
	border-bottom: 1px solid #EEEEEE;
	border-radius: 4px;
	overflow: hidden;
}
.form-item-list .compute text{
	width: 36px;
	height: 36px;
	line-height: 36px;
	background: #f7f7f7;
	font-size: 18px;
	text-align: center;
	border-left: 1px solid #EEEEEE;
	border-right: 1px solid #EEEEEE;
}
.form-item-list .compute .num{
	width: 60px;
	text-align: center;
	margin: 0;
}
.form-item-list.predict .note{
	color: #999;
	font-size: 12px;
	display: block;
}
.form-item-list.predict .compute .num{
	width: 40px;
}
.form-item-list.predict .compute .add{
	margin-left: 5px;
}
.form-item-list .volume{
	display: flex;
	display: -webkit-flex;
	align-items: center;
	height: 25px;
	line-height: 25px;
}
.form-item-list .volume input{
	width: 40px;
	height: 25px;
	border: 1px solid #EEEEEE;
	border-right: 0;
	border-top-left-radius: 4px;
	border-bottom-left-radius: 4px;
	padding-left: 5px;
}
.form-item-list .volume .unit{
	border: 1px solid #EEEEEE;
	border-left: 0;
	border-top-right-radius: 4px;
	border-bottom-right-radius: 4px;
	color: #999999;
	padding-right: 5px;
}
.form-item-list .volume .f-h{
	padding: 0 3px;
	margin-top: 3px;
}
.form-item-list .volume.total{
	margin-top: 10px;
	float: right;
}
.form-item-list .volume.total input{
	margin-left: 5px;
	color: #FD9523;
	width: 70px;
	text-align: center;
}
.form-item-list .take{
	padding-top: 5px;
}
.form-item-list .take text{
	font-size: 12px;
}
.form-item-list .take .btn{
	background-color: #f2f2f2;
	padding: 2px 6px;
	border-radius: 20px;
	margin-right: 5px;
}
.form-item-list .take .btn.packActive{
	background-color: #FF0000;
	color: #FFFFFF;
}
.good-name-list{
	position: absolute;
	top: 48px;
	left: 0;
	right: 0;
	max-height: 300px;
	background-color: #FFFFFF;
	border-bottom: 1px solid #eee;
	overflow-y: auto;
}
.good-name-list text{
	display: block;
	height: 32px;
	line-height: 32px;
	padding: 0 15px;
}
.tips{
	padding: 0 15px;
}
.btn-default-css{
	margin-bottom: 50px;
}
.red{
	font-size: 12px;
	color: #FF0000;
}
</style>