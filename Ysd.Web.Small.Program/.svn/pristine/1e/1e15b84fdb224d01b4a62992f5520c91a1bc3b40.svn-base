<template>
	<view>
		<view class="user-info-list">
			<view class="con">
				<text class="iconfont icon-ji1"></text>
				<view @click="addressPage(0,'send')">
					<text class="s-t">{{sendInfo.name}}</text>
					<text class="address-input">{{sendInfo.address}}</text>
				</view>
			</view> 
			<view class="address-icon" @click="addressPage(1,'send')">
				<text class="iconfont icon-dizhibao"></text>地址簿
			</view>
		</view>
		<view class="user-info-list">
			<view class="con">
				<text class="iconfont icon-shou"></text>
				<view  @click="addressPage(0,'rep')">
					<text class="s-t">{{repInfo.name}}</text>
					<text class="address-input">{{repInfo.address}}</text>
				</view>
			</view>
			<view class="address-icon" @click="addressPage(1,'rep')">
				<text class="iconfont icon-dizhibao"></text>地址簿
			</view>
		</view>
		<form class="form">
			<picker @change="expressTypeChange" :range="expressTypeData" v-if="isShowxs">
				<label class="label-item">
					<view>
						<text v-bind:class="[expressTypeIndex==0?'input-txt':'']" class="">{{expressTypeData[expressTypeIndex]}}</text>
						<text class="iconfont icon--right-jian"></text>
					</view>
					寄件形式<text class="red">（必填）</text>
				</label>
			</picker>
			<picker @change="expressCompanyPickerChange" :value="expressCompany.index" :range="expressCompany.range">
				<label class="label-item">
					<view>
						<image :src="expressCompany.path"></image>{{expressCompany.companyName}}
						<text class="iconfont icon--right-jian"></text>
					</view>
					物流公司
				</label>
			</picker>
			<label class="label-item" @click="open">
				<view>
					{{sendTime}}
					<text class="iconfont icon--right-jian"></text>
				</view>
				期望上门时间
			</label>
			<label class="label-item" @click="goGoodsInfo">
				<view>
					<text v-bind:class="{'input-txt':goodName==''}">{{goodName==""?"请填写":goodName}}</text>
					<text class="iconfont icon--right-jian"></text>
				</view>
				物品信息<text class="red">（必填）</text>
			</label>
			<label class="label-item" @click="goInsuredPrice">
				<view>
					<text class="input-txt" v-if="insuredPrice==null">请填写保价信息</text>
					<view class="money" v-else>{{insuredPrice.amount=="不保价"?insuredPrice.amount:"￥"+insuredPrice.amount}}<text v-if="insuredPrice.price!=0">￥{{insuredPrice.price}}</text></view>
					<text class="iconfont icon--right-jian"></text>
				</view>
				保价<text v-if="type=='big'" class="red">（必填）</text>
			</label>
			<label class="label-item" @click="goService">
				<view>
					<text v-bind:class="{'input-txt':serviceNames=='','red':serviceNames!=''}">{{serviceNames==""?"付款方式、签单返还等":serviceNames}}</text>
					<text class="iconfont icon--right-jian"></text>
				</view>
				增值服务
			</label>
		</form>
		<form class="form">
			<label class="label-item">
				<view>
					<switch color="#4285F4" :checked="isBillExpress" @change="switchChange" layout_width="80px" />
				</view>
				启用电子面单
			</label>
		</form>
		<view class="bill-express-tips">注:启用电子面单后需打印出电子面单并且要自行联系快递员揽件</view>
		<view class="loading" v-if="isLoading"><image src="../../static/images/loading.gif"></image>产品类型正在加载中...</view>
		<view class="estimate-price-box" v-if="estimatePriceList.length != 0">
			产品类型
			<view class="estimate-list" v-for="(item, k) in estimatePriceList" :key="k" @click="btnSelProductType(item, k)">
				<view class="con" :class="{ active: selectProduct==k}">
					<view class="name">
						<view class="flex">
							{{item.productName}}
							<text v-if="item.minWeight!=''&&item.maxWeight!=''">{{item.minWeight}}kg-{{item.maxWeight}}kg</text>
							<text v-if="item.minWeight!=''&&item.maxWeight==''">{{item.minWeight}}kg以上</text>
						</view>
						<text>{{item.receivedTime==""||item.receivedTime==null?"--":item.receivedTime}}</text>
					</view>
					<view v-if="item.price > 0">
						<view class="price">￥<text>{{item.price}}</text></view>
						<view v-if="item.price!=item.originalPrice" class="original">市场价 ￥{{item.originalPrice}}</view>
					</view>
				</view>
				<text class="note" v-if="item.otherPriceMemo!=''&&item.otherPriceMemo!=null">{{item.otherPriceMemo}}</text>
				<text class="note" v-if="item.specialMemo!=''&&item.specialMemo!=null">{{item.specialMemo}}</text>
			</view>
		</view>
		<view class="agree-con">
			<checkbox class="orange" :checked="checkedAgree" @click="checkedAgree=!checkedAgree">我已阅读并同意</checkbox>
			<text @click="isAgree=true">《仪商汇快运服务协议》</text>
			<text  @click="isClause=true">{{expressCompany.agreementUrl}}</text>
		</view>
		<view class="footer">
			<view class="yhq" v-if="isShowYhq&&countYHQ!=0"><text @click="isShowYhq=false" class="iconfont icon-quxiao"></text>你有{{countYHQ}}张可用优惠券，支付时将会自动抵扣</view>
			<button @click="orderNow">立即下单</button>
			<view class="estimate">预估：<text v-if="paytype=='到付'">￥--</text><text v-else>￥{{sumMoney == "" || sumMoney == 0.0 ? "--" : sumMoney}}</text></view>
			<text class="tips">最终费用以系统核实价格为准</text>
		</view>
		<sendTimePicker
			:show="popupShow" 
			:startTime="startTime" 
			:endTime="endTime" 
			:setPickerIndex="setPickerIndex" 
			:timeTabIndex="timeTabIndex"
			:code="expressCompany.code" 
			@close="close" 
			@change="timeChange"></sendTimePicker>
		<view v-if="isAgree" @click="isAgree=false">
			<view class="v-model"></view>
			<view class="popup-txt" v-html="agreeHtml"></view>
		</view>
		<view v-if="isClause" @click="isClause=false">
			<view class="v-model"></view>
			<view class="popup-txt" v-html="clauseHtml"></view>
		</view>
		<view v-if="isCompanyPassword">
			<view class="v-model" @click="isCompanyPassword=false"></view>
			<view class="company-password-box">
				<view class="title">立即支付<text class="iconfont icon-quxiao" @click="isCompanyPassword=false"></text></view>
				<view class="money">¥<text>{{sumMoney}}</text></view>
				<input type="password" placeholder="请输入企业支付密码" @input="passwordInput" />
				<button class="btn-default-css" @click="orderNow">确定</button>
			</view>
		</view>
	</view>
</template>
<script>
import sendTimePicker from "../../components/sendTime-picker/sendTime-picker.vue"
export default {
	data() {
		return {
			type: "small",
			sendInfo: {
				name: "寄件人信息",
				contactsCode: "",
				address: "点击填写寄件地址",
				ad: "",
				areaCode: ""
			},
			repInfo: {},
			expressTypeData: ["请选择","个人"],
			expressTypeIndex: 0,
			insuredPrice: null,
			expressCompany: {
				list: [],
				range: [],
				index: 0,
				code: "",
				path: "",
				agreementUrl: "",
				companyName: "",
				insuranceUpper: 0
			},
			popupShow: false,
			startTime: 8,
			endTime: 19,
			setPickerIndex: [0],
			timeTabIndex: 0,
			sendTime: '一小时内',
			isAgree: false,
			isClause: false,
			agreeHtml: "",
			clauseHtml: "",
			couponCountUser: 0,
			couponCountCompany: 0,
			checkedAgree: false,
			isShowxs:false,
			serviceNames: "",
			serviceList: [],
			isBillExpress: false,
			goodInfoData: {},
			goodName: "",
			estimatePriceList: [],
			selectProduct: 0,
			productType: "",
			sumMoney: "",
			isShowYhq: true,
			countYHQ: 0,
			isLoading: false,
			expressModeStorage: 0,
			companyCodeStorage: "",
			isCompanyPassword: false,
			password: "",
			paytype:""
		}
	},
	components: {
		sendTimePicker
	},
	onLoad(options){
		this.type = options.type;
		let title = "寄快递";
		if((options.type).indexOf("small") != -1){
			title = "寄快递";
			this.type = "small";
		}
		if((options.type).indexOf("big") != -1){
			title = "寄大件";
			this.type = "big";
		}
		//若local storage 存在寄件形式&&物流公司
		let expressStorage = uni.getStorageSync('expressStorage');
		if(expressStorage != "" && expressStorage != undefined){
			this.expressModeStorage = JSON.parse(expressStorage).expressMode;
			this.companyCodeStorage = JSON.parse(expressStorage).companyCode;
			this.$store.state.expressDeliveryInfo.companyCode = this.companyCodeStorage;
		}
		uni.setNavigationBarTitle({ title: title });
		this.getExpressCompany();
		this.isRegister();
		this.getYshESAgree();
	},
	onShow(){
		let app = getApp();
		app.isToken();
		this.setvalue();
	},
	methods: {
		setvalue(){
			//全局赋值
			let storage_data = uni.getStorageSync('expressListData');
			if(storage_data != "" && storage_data != undefined){
				this.$store.state.expressDeliveryInfo = JSON.parse(storage_data);
				uni.removeStorageSync('expressListData');
			}
			let expressDeliveryInfo = this.$store.state.expressDeliveryInfo;
			let sendAddress = expressDeliveryInfo.sendAddress; //寄件地址
			let repAddress = expressDeliveryInfo.repAddress; //收件地址
			let insuredPrice = expressDeliveryInfo.insuredPrice; //保价
			let serviceData = expressDeliveryInfo.service; //增值服务
			let goodInfoData = expressDeliveryInfo.goodInfo; //物品信息
			this.goodInfoData = {};
			this.insuredPrice = null;
			this.password = "";
			//寄件地址 true--获取用户设置的默认地址;否则获取自己选择的地址
			if(JSON.stringify(sendAddress) == "{}"){
				this.getDefault();
			}else{
				this.sendInfo = sendAddress;
			}
			//收件地址 true--获取用户设置的默认地址;否则获取自己选择的地址
			if(JSON.stringify(repAddress) == "{}"){
				this.repInfo = {
					name: "收件人信息",
					contactsCode: "",
					address: "点击填写收件地址",
					ad: "",
					areaCode: ""
				}
			}else{
				this.repInfo = repAddress;
			}
			//物品信息
			if(JSON.stringify(goodInfoData) != "{}"){
				this.goodInfoData = goodInfoData;
				this.goodName = goodInfoData.goodName;
			}
			//保价
			if(JSON.stringify(insuredPrice) != "{}"){
				this.insuredPrice = insuredPrice;
			}
			//增值服务
			if(JSON.stringify(serviceData) != "{}"){
				this.serviceList = [];
				let str = "";
				serviceData.forEach(item => {
					let s = (item.sub.remark).replace(/ /g, '');
					str += s+'-';
					this.serviceList.push(item.sub);
					if(item.sub.serviceKey == "PayType" ){
						this.paytype = item.sub.remark;
					}
				})
				this.serviceNames = str.substring(0,str.length-1);
			}
			//寄件形式
			if(expressDeliveryInfo.type != ""){
				this.expressTypeIndex = expressDeliveryInfo.type;
			}
			if (expressDeliveryInfo.type == 0) {
				this.expressTypeIndex = 1;
			}
			//物流公司
			if(expressDeliveryInfo.companyCode != ""){
				for(var i = 0; i < this.expressCompany.list.length; i++){
					if(this.expressCompany.list[i].companyCode == expressDeliveryInfo.companyCode){
						this.setCompanyValue(i);
					}
				}
			}
			this.calculateProductType();
		},
		//立即下单
		orderNow: function(){
			const that = this;
			if(!that.Valid()) return false;
			uni.showLoading({ mask: true, title: '正在下单'});
			let createTime = this.expectedTime();
			var amount = "";
			if(that.insuredPrice != null) {
				var amount = that.insuredPrice.amount;
			}
			let takeBillInfo = that.$store.state.expressDeliveryInfo.takeBill;
			let _takeDeliveryRemark = "";
			let _takeDeliveryAttachment = [];
			if(JSON.stringify(takeBillInfo) != "{}"){
				_takeDeliveryRemark = takeBillInfo.takeDeliveryRemark; 
				_takeDeliveryAttachment = takeBillInfo.takeDeliveryAttachment;
			}
			let param = {
				companyCode: that.expressCompany.code,
				fromContactsCode: that.sendInfo.contactsCode,
				toContactsCode: that.repInfo.contactsCode,
				expressMode: that.expressTypeIndex, //寄件形式
				insurance: amount, //报价金额
				insuranceCompanyCode: that.expressCompany.code,
				expressType: that.type,
				serviceList: that.serviceList, //增值服务
				sendTime: createTime,
				isBillExpress: that.isBillExpress,
				estimateGoods: { //物品信息
					weight: that.goodInfoData.weigth, //重量
					volume: that.goodInfoData.cubic <= 0 ? 0 : that.goodInfoData.cubic, // 体积m³
					category: that.goodInfoData.packType,//产品类型
					name: that.goodInfoData.goodName, //名称
					count: that.goodInfoData.goodNum, //数量
				},
				remark: that.goodInfoData.remark, //物品信息备注 
				memo: that.goodInfoData.goodMemo,//内部注释
				packageService: that.goodInfoData.packageservice ,//包装材质
				productType: that.productType, //预估价格产品类型
				password: that.password,
				takeDeliveryRemark: _takeDeliveryRemark,    ////提货单备注 
				takeDeliveryAttachment: _takeDeliveryAttachment,    ////提货单上传文件
			}
			console.log(param)
			that.password = "";
			that.$util.networkRequest({
				url : "/Express/Post",
				method: "POST",
				data: param,
				success: function(res){
					let data = res;
					let _storageData = {expressMode: that.expressTypeIndex, companyCode: that.expressCompany.code};
					//默认寄件形式&&物流公司
					uni.setStorage({key: 'expressStorage', data: JSON.stringify(_storageData)});
					that.emptyData();
					uni.navigateTo({url: "/pages/order/orderSuccess?mastCode="+data.mastCode+"&sendTime="+data.sendTime});
				},
				error: function(res){
					//个人余额不足跳转充值存localStorage
					if(res.errCode == 2001){
						uni.showModal({
						    title: '提示',
						    content: res.message,
							showCancel: false,
						    success: function (res) {
						        uni.setStorage({key: 'expressListData', data: JSON.stringify(that.$store.state.expressDeliveryInfo)});
						        uni.navigateTo({ url: "/pages/me/myRefill?type="+that.type});
						    }
						});
					}
				}
			});
		},
		//输入企业支付密码
		passwordInput: function(e){
			this.password = e.detail.value;
		},
		//计算产品类型
		calculateProductType(){
			let that = this;
			if(that.sendInfo.areaCode == "") return false;
			if(that.repInfo.areaCode == "") return false;
			if(JSON.stringify(that.goodInfoData) == "{}") return false;
			var amount = "";
			if(that.insuredPrice != null) {
				var amount = that.insuredPrice.amount;
			}
			if(that.isShowxs){
				if(that.expressTypeIndex == 0) return false;
			}
			else{
				that.expressTypeIndex = 1;
			}
			that.estimatePriceList = [];
			that.productType = "";
			let createTime = this.expectedTime();
			that.isLoading = true;
			let data = {
				ExpressMode: that.expressTypeIndex,
				areaCodeFrom: that.sendInfo.areaCode,
				fromAddress: that.sendInfo.ad,
				toAddress: that.repInfo.ad,
				areaCodeTo: that.repInfo.areaCode,
				companyCode: that.expressCompany.code,
				insuranceValue: amount,
				sendTime: createTime,
				volume: that.goodInfoData.cubic <= 0 ? 0 : that.goodInfoData.cubic,
				serviceDeliveryTypeInfo: that.serviceList,
				weight: that.goodInfoData.weigth
			}
			that.$util.networkRequest({
				url : "/Price/EstimatePrice",
				method: "POST",
				data: data,
				success: function(res){
					res.filter(item => {
						item.price = item.price.toFixed(2);
						item.originalPrice = item.originalPrice.toFixed(2);
					});
					that.estimatePriceList = res;
					that.productType = res[0].productType;
					that.btnSelProductType(res[0], 0);
					that.isLoading = false;
				},
				error: function(res){
					that.isLoading = false;
				}
			});
		},
		//预估价格
		btnSelProductType: function(item, i){
			this.sumMoney = "";
			if(this.insuredPrice !== null) {
					this.insuredPrice.price = item.insurancePrice;
			}
			this.selectProduct = i;
			this.productType = item.productType;
			this.sumMoney = parseFloat(
				parseFloat(item.price) +
				parseFloat((item.insurancePrice == "" ? 0 : item.insurancePrice))
			)
		},
		//跳转地址
		addressPage: function(key, type){
			if(key == 0){
				//新增&&编辑
				let code = "";
				if(type == "send") code = this.sendInfo.contactsCode;
				if(type == "rep") code = this.repInfo.contactsCode;
				uni.navigateTo({url: "/pages/me/addressEdit?code="+code+"&type="+type});
			}
			if(key == 1){
				//列表
				uni.navigateTo({url: "/pages/me/addressList?type="+type});
			}
		},
		//物品信息
		goGoodsInfo: function(){
			uni.navigateTo({url: "/pages/index/goodsInfo?type="+this.type+"&upperAmount="+this.expressCompany.insuranceUpper+"&code="+this.expressCompany.code});
		},
		//请填写报价信息
		goInsuredPrice: function(){
			uni.navigateTo({
				url: "/pages/index/insuredPrice?type="+this.type+"&upperAmount="+this.expressCompany.insuranceUpper+"&code="+this.expressCompany.code,
			});
		},
		//增值服务
		goService: function(){
			uni.navigateTo({url: "/pages/index/addedService?code="+this.expressCompany.code});
		},
		//启用电子面单
		switchChange: function (e) {
			this.isBillExpress = e.target.value;
		},
		//物流公司
		expressCompanyPickerChange(e){
			let index = e.detail.value;
			this.$store.state.expressDeliveryInfo.expectTime = "";
			this.setCompanyValue(index);
			this.$store.state.expressDeliveryInfo.companyCode = this.expressCompany.list[index].companyCode;
			//更换物流公司 增值清空
			this.$store.state.expressDeliveryInfo.service = {};
			this.$store.state.expressDeliveryInfo.takeBill = {};
			this.serviceNames = "";
			this.initServiceData();
			this.calculateProductType();
		},
		setCompanyValue(index){
			let _code = this.expressCompany.list[index].companyCode;
			let _start = this.expressCompany.list[index].startTime;
			let _end = this.expressCompany.list[index].endTime;
			let _path = this.expressCompany.list[index].logoPath;
			let _agreementUrl = this.expressCompany.list[index].agreementUrl;
			this.expressCompany.index = index;
			this.expressCompany.code = _code;
			this.expressCompany.path = _path.replace(/\s*/g, "");
			this.expressCompany.agreementUrl = _agreementUrl;
			this.expressCompany.companyName = this.expressCompany.list[index].companyName;
			this.expressCompany.insuranceUpper = this.expressCompany.list[index].insuranceUpper;
			this.clauseHtml = this.expressCompany.list[index].agreementContent;
			this.startTime = _start;
			this.endTime = _end;
			this.setPickerIndex = [0];
			this.setDate(_code, _end);
		},
		//选择时间段
		open(){
			this.popupShow = true;
		},
		close(){
			this.popupShow = false;
		},
		timeChange(data){
			this.setPickerIndex = [Number(data.pickerIndex)];
			this.sendTime = data.txt;
			// console.log(data.txt);
			// console.log(data.tabIndex);
			this.timeTabIndex = data.tabIndex;
			this.$store.state.expressDeliveryInfo.expectTime = this.sendTime;
			this.calculateProductType();
		},
		setDate(_code,_end){
			let _txt = "";
			let _expectTime = this.$store.state.expressDeliveryInfo.expectTime;
			if(_expectTime == ""){
				this.timeTabIndex = 0;
				this.sendTime = _code==""||_code=="sf001"||_code=="ky001"?_txt+" 一小时内":_txt+" 两小时内";
			}else{
				this.sendTime = _expectTime;
			}
		},
		//计算期望上门时间年月日 时:分
		expectedTime(){
			let date = new Date();
			let new_date = "";
			let hour = "";
			if(this.sendTime.indexOf("小时") != -1){
				let h_i = 1;
				if(this.timeTabIndex == 1){
					//若距离下班时间1小时则期待上门时间是明天
					new_date = new Date(date.getTime() + 24*60*60*1000);
					hour = this.startTime+':00';
				}else{
					if(this.expressCompany.code == "sf001" || this.expressCompany.code == "ky001"){
						if(((this.endTime - 1) < (new Date).getHours() )&& ((new Date).getHours() < this.endTime)){
							return date.getFullYear()+'-'+(date.getMonth() + 1)+'-'+date.getDate()+' '+this.endTime+':00';
						}
						//顺丰一小时之内
						new_date = new Date(date.getTime() + 60*60*1000);
					}else{
						if(((this.endTime - 2) < (new Date).getHours() )&& ((new Date).getHours() < this.endTime)){
							return date.getFullYear()+'-'+(date.getMonth() + 1)+'-'+date.getDate()+' '+this.endTime+':00';
						}
						//德邦两小时之内
						new_date = new Date(date.getTime() + 60*60*1000*2);
					}
					
					hour = new_date.getHours()+':'+new_date.getMinutes();
				}
			}
			else{
				//已选择时间段
				hour = this.sendTime.split("-")[1];
				console.log(hour);
				if(this.timeTabIndex==0){
					new_date = new Date();
					if(hour=="24:00"){
						hour="23:59";
					}
					
				}else{
					new_date = new Date(date.getTime() + 24*60*60*1000*this.timeTabIndex);
					if(hour=="24:00"){
						hour="23:59";
					}
				}
			}
			return new_date.getFullYear()+'-'+(new_date.getMonth() + 1)+'-'+new_date.getDate()+' '+hour;
		},
		//获取物流公司
		getExpressCompany(){
			const that = this;
			that.expressCompany = {
				list: [],
				range: [],
				index: 0,
				code: "",
				path: "",
				agreementUrl: "",
				companyName: "",
				insuranceUpper: 0
			};
			let _companyType = that.type == "small"?"Normal":"Big";
			that.$util.networkRequest({
				url : "/ExpressCompany/GetList",
				data: {companyType: _companyType},
				success : function(res){
					let index = that.expressCompany.index;
					if(that.companyCodeStorage != ""){
						for(var i = 0; i < res.length; i++){
							if(res[i].companyCode== that.companyCodeStorage){
								index = i;
							}
						}
					}
					let _data = res[index];
					that.expressCompany.list = res;
					that.expressCompany.code = _data.companyCode;
					that.expressCompany.companyName = _data.companyName;
					that.expressCompany.insuranceUpper = _data.insuranceUpper;
					that.expressCompany.path = _data.logoPath.replace(/\s*/g, "");
					that.expressCompany.agreementUrl = _data.agreementUrl;
					that.clauseHtml = _data.agreementContent;
					that.startTime = _data.startTime;
					that.endTime = _data.endTime;
					that.initServiceData(); //增值服务
					that.setDate("", that.endTime);
					that.setCompanyValue(index);
					res.forEach((c,i)=>{
						that.expressCompany.range.push(c.companyName);
					});
				}
			})
		},
		//寄件形式
		expressTypeChange: function(e){
			this.expressTypeIndex = e.target.value;
			this.$store.state.expressDeliveryInfo.type = e.target.value;
			this.countYHQ = this.expressTypeIndex == 1?this.couponCountUser:this.couponCountCompany;
			if(this.expressTypeIndex == 0) this.estimatePriceList = [];
			this.calculateProductType();
		},
		//寄件形式
		isRegister(){
			const that = this;
			that.$util.networkRequest({
				url : "/Company/IsRegister",
				success : function(res){
					if(res){
						that.isShowxs=true;
						that.getCoupon();
						that.expressTypeData.push("企业");
					}
					else{
						that.isShowxs=false;
						that.expressTypeIndex=1;
					}
					if (that.expressModeStorage !== 0) {
						if (that.expressModeStorage == 2) {
							that.expressTypeIndex = that.expressTypeData.length == 3 ? that.expressModeStorage : 1;
						} else {
							that.expressTypeIndex = that.expressModeStorage;
						}
					}
					that.$store.state.expressDeliveryInfo.type = that.expressTypeIndex;
				}
			});
		},
		//获取服务协议
		getYshESAgree(){
			const that = this;
			that.$util.networkRequest({
				url : "/ExpressCompany/GetYshESAgree",
				success : function(res){
					that.agreeHtml = res;
				}
			});
		},
		//获取默认地址簿
		getDefault(){
			const that = this;
			that.$util.networkRequest({
				url : "/AddressBook/GetDefault",
				success : function(res){
					if(!that.$util.isNotEmpty(res)){
						return false;
					}
					that.sendInfo = {
						name: res.name,
						contactsCode: res.contactsCode,
						address: res.areaInfo.province+res.areaInfo.city+res.areaInfo.area+res.address,
						ad: res.address,
						areaCode: res.areaInfo.areaCode
					}
					that.$store.state.expressDeliveryInfo.sendAddress = that.sendInfo;
				}
			});
		},
		//优惠券数
		getCoupon(){
			const that = this;
			that.$util.networkRequest({
				url : "/Coupon/GetCouponCountModel",
				success : function(res){
					if(that.expressTypeIndex != 0) that.countYHQ = that.expressTypeIndex == 1?res.userCount:res.companyCount;
					that.couponCountUser = res.userCount;
					that.couponCountCompany = res.companyCount;
				}
			});
		},
		//增值服务
		initServiceData(){
			let that = this;
			if(JSON.stringify(this.$store.state.expressDeliveryInfo.service) == "{}"){
				that.serviceList = [];
				that.$util.networkRequest({
					url : "/ExpressService/GetList",
					data: {companyCode: that.expressCompany.code},
					success : function(res){
						res.forEach(item => {
							let _subData = item.listDetail[0];
							if(that.expressCompany.code == "db001" && item.serviceKey == "DeliveryType"){
								//若是德邦:提货方式默认“送货（不含上楼）”
								item.listDetail.forEach(sub => {
									if(sub.remark == "送货（不含上楼）"){
										_subData = sub;
									}
								});
							}
							that.serviceList.push({
								remark: _subData.remark,
								serviceKey: _subData.serviceKey,
								serviceValue: _subData.serviceValue
							});
						})
					}
				})
			}
		},
		Valid(){
			if(!this.$util.isNotEmpty(this.sendInfo.contactsCode)){
				this.$util.showToast("寄件人不能为空");
				return false;
			}
			if(!this.$util.isNotEmpty(this.repInfo.contactsCode)){
				this.$util.showToast("收件人不能为空");
				return false;
			}
			if(this.expressTypeIndex == 0){
				this.$util.showToast("请选择寄件形式");
				return false;
			}
			if(JSON.stringify(this.goodInfoData) == "{}"){
				this.$util.showToast("请填写物品信息");
				return false;
			}
			if(this.insuredPrice == null && this.type=="big"){
				this.$util.showToast("请填写保价信息");
				return false;
			}
			if (this.expressCompany.code == "db001" && this.isBillExpress == true && this.goodInfoData.packageservice == "") {
				this.$util.showToast("请选择包装材质");
				return false;
			}
			if(!this.$util.isNotEmpty(this.productType)){
				this.$util.showToast("请选择价预估价格");
				return false;
			}
			if(!this.checkedAgree){
				this.$util.showToast("请详细阅读条款并勾选");
				return false;
			}
			if(this.expressTypeIndex == 2 && this.password == ""){
				let bool = true;
				this.serviceList.forEach(item => {
					if(item.serviceKey == "PayType" && item.serviceValue == 1){
						bool = false;
					}
				});
				if(bool){
					this.isCompanyPassword = true;
					return false;
				}else{
					this.isCompanyPassword = false;
				}
			}else{
				this.isCompanyPassword = false;
			}
			return true;
		},
		//清空数据
		emptyData(){
			this.password = "";
			this.estimatePriceList = [];
			this.sumMoney = "";
			this.goodName = "";
			this.insuredPrice = null;
			this.serviceNames = "";
			this.isBillExpress = false;
			this.checkedAgree = false;
			this.$store.state.expressDeliveryInfo = {
				type: "", //寄件形式
				companyCode: "",//物流公司
				expectTime: "", //期望时间
				sendAddress: {}, //寄件地址
				repAddress: {},  //收件地址
				goodInfo: {}, //物品信息
				insuredPrice: {}, //保价
				service: {} //增值服务,
			}
		}
	}
}
</script>
<style scoped>
	@import '../../common/css/index/expressDelivery.css';
</style>