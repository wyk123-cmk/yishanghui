<template>
	<view class="content">
		<view class="price">
			声明价值
			<label><input type="number" :placeholder="placeholder" @input="amountInput" v-model="amount" />元</label>
		</view>
		<text class="note" v-if="note">注:保费不能超过{{upperAmount}}元</text>
		<view class="money">预估费用：{{bjmoney}}元</view>
		<view class="explain">
			<text>说明</text>
			<view style="color: #999999;" v-html="contents"></view>
		</view>
		<view class="btn">
			<text @click="btnNoPrice" v-if="isPrice">不保价</text>
			<text class="confirm" @click="btnOkPrice" v-bind:class="{ width: !isPrice}">确认保价</text>
		</view>
	</view>
</template>
<script>
export default {
	data() {
		return {
			type: "",
			code: "",
			amount: "",
			bjmoney: 0,
			upperAmount: 0,
			contents: "",
			isPrice: false,
			note: false,
			placeholder: "1-500000整数",
		}
	},
	onLoad(options){
		const that = this;
		that.type = options.type;
		that.code = options.code;
		that.upperAmount = options.upperAmount;
		that.placeholder = "1-"+that.upperAmount+"整数";
		that.isPrice = that.type == "small"?true:false;
		//获取说明
		that.$util.networkRequest({
			url : "/Price/GetInsuranceAgree",
			data:{
				companyCode: that.code,
				expressType: that.type
			},
			success : function(res){
				that.contents = res;
			}
		});
		let data = this.$store.state.expressDeliveryInfo.insuredPrice;
		if(JSON.stringify(data) != "{}"){
			that.amount = data.amount;
			that.bjmoney = data.price;
		}
	},
	methods: {
		//不保价
		btnNoPrice: function(){
			this.$store.state.expressDeliveryInfo.insuredPrice = {
				price: 0,
				amount: "不保价"
			}
			this.$util.navigateBack(this);
		},
		//确认保价
		btnOkPrice: function(){
			if(!this.$util.isNotEmpty(this.amount)){
				this.$util.showToast("请填写保价金额");
				return false;
			}
			if(parseFloat(this.amount)>parseFloat(this.upperAmount)){
				this.$util.showToast("保费不能超过￥"+this.upperAmount);
				return false;
			}
			this.$store.state.expressDeliveryInfo.insuredPrice = {
				price: this.bjmoney,
				amount: this.amount
			}
			this.$util.navigateBack(this);
		},
		amountInput: function(e){
			let val = e.detail.value;
			if(val != ""){
				if(parseFloat(val)>this.upperAmount){
					this.note = true;
				}else{
					this.note = false;
					this.setPrice(val);
				}
			}else{
				this.note = false;
				this.bjmoney = 0;
			}
		},
		setPrice: function(val){
			const that = this;
			that.$util.networkRequest({
				url : "/Price/InsurancePrice",
				method: "POST",
				data:{
					Amount: val,
					CompanyCode: that.code,
					ExpressType: that.type
				},
				success : function(res){
					that.bjmoney = res;
				}
			});
		}
	}
}
</script>
<style scoped>
.content{
	padding: 15px;
	border-top: 1px solid #EEEEEE;
}
.price{
	display: flex;
	justify-content: space-between;
	line-height: 40px;
}
.price label{
	border: 1px solid #EEEEEE;
	display: box;
	display: -webkit-box;
	padding: 0 10px;
}
.price label input{
	height: 40px;
	line-height: 40px;
	margin-right: 5px;
}
.money,
.note{
	display: block;
	text-align: right;
}
.note{
	padding-top: 3px;
	font-size: 12px;
	color: #FF0000;
}
.money{
	padding: 12px 0;
}
.btn{
	height: 60px;
	background-color: #FFFFFF;
	position: fixed;
	bottom: 10px;
	left: 0;
	right: 0;
	display: flex;
	display: -webkit-flex;
	align-items: center;
	justify-content: center;
}
.btn text{
	color: #4285F4;
	border: 1px solid #4285F4;
	width: 30%;
	text-align: center;
	display: block;
	border-radius: 20px;
	line-height: 38px;
	margin: 0 5%;
}
.btn text.confirm{
	background-color: #4285F4;
	color: #FFFFFF;
}
.btn text.width{
	width: 90%;
}
</style>